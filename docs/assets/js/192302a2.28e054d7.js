"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[1267],{8334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"Programacion/Arduino/hal-mqtt-node-red","title":"ESP32 + HAL adaptado a Node-red","description":"128736;  ESP32 + HAL adaptado a Node-red","source":"@site/docs/Programacion/Arduino/hal-mqtt-node-red.md","sourceDirName":"Programacion/Arduino","slug":"/Programacion/Arduino/hal-mqtt-node-red","permalink":"/me/docs/docs/Programacion/Arduino/hal-mqtt-node-red","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programacion/Arduino/hal-mqtt-node-red.md","tags":[],"version":"current","frontMatter":{"title":"ESP32 + HAL adaptado a Node-red"},"sidebar":"tutorialSidebar","previous":{"title":"Flujo Aedes - Hal","permalink":"/me/docs/docs/Programacion/Arduino/flujo-hal-esp32"},"next":{"title":"Petici\xf3n POST en Node-red","permalink":"/me/docs/docs/Programacion/Arduino/hal_post"}}');var a=t(4848),i=t(8453);const o={title:"ESP32 + HAL adaptado a Node-red"},d="\ud83d\udee0  ESP32 + HAL adaptado a Node-red",c={},s=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"--esp32--hal-adaptado-a-node-red",children:"\ud83d\udee0  ESP32 + HAL adaptado a Node-red"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:(0,a.jsx)(n.p,{children:"C\xf3digo fuente para implementar en el ESP32 una detecci\xf3n de temperatura del microprocesador y enviar los datos por WiFi y MQTT a Node-red"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c++",children:'//*******************************************\n//      MODIFICADO PARA NODE-RED\n//*******************************************\n// LIBRERIAS\n//*******************************************\n/*#include <Arduino.h>\n#include <WiFi.h>\n#include <Adafruit_Sensor.h>\n#include <PubSubClient.h> // Esta libreria hay que a\xf1adirla desde Librerias de PIO\n#include <esp32-hal.h> // Para leer la temperatura\n\n//*******************************************\n// CONFIGURACI\xd3N DE RED Y BROKER\n//*******************************************\nconst char *ssid = "";\nconst char *password = "";\n// Red tel\xe9fono m\xf3vil\n//const char *ssid = "****"\n//const char *password = "*****"\nconst char *mqtt_server = "192.168.1.55"; // IP DEL HOST LOCAL DONDE SE EJECUTA EL BROKER (NO USAR NUNCA LOCALHOST, PORQUE EL ESP32 LA INTERPRETA COMO LA PROPIA DEL ESP32)\n\n//*******************************************\n//  OBJETOS: WIFI Y CLIENT\n//*******************************************\nWiFiClient espClient;\nPubSubClient client(espClient);\n\n//*******************************************\n// FUNCI\xd3N CONEXI\xd3N WIFI\n//*******************************************\nvoid init_wifi(){\n    delay(10);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED)\n    {\n        delay(500);\n        Serial.println("Intentando establecer la conexi\xf3n WiFi...");\n    }\n    Serial.println("Establecida la conexi\xf3n WiFi");\n}\n\n//*******************************************\n// FUNCI\xd3N CONEXI\xd3N MQTT\n//*******************************************\nvoid conect_broker(){\n    while (!client.connected()){\n        Serial.print("Conectando al BROKER MQTT...");\n        if (client.connect("ESP32Client")){\n            Serial.println("WORKS! Establecida conexi\xf3n con el BROKER");\n            client.subscribe("temperature"); // Subcribirse al TOPIC\n        }\n        else{\n            Serial.print("ERROR!, rc= ");\n            Serial.print(client.state());\n            Serial.println("Reintentanto establecer la conexi\xf3n tras 1 segundo...");\n            delay(1000);\n        }\n    }\n}\n\n//*******************************************\n// FUNCI\xd3N LEER TEMPERATURA\n//*******************************************\nvoid setTemperature(){\n    float temp = temperatureRead();\n    Serial.print("Temperatura: ");\n    Serial.print(temp);\n    Serial.println("\xba C");\n    client.publish("temperature", String(temp).c_str()); // Como un String\n}\n\n//***********************************************************************************************\n//*******************************************\n//       FUNCI\xd3N SETUP EN ARDUINO\n//*******************************************\nvoid setup(){\n        Serial.begin(115200);\n        init_wifi(); // Llamada a funci\xf3n \n        client.setServer(mqtt_server, 1883); \n}\n\n//*******************************************\n//       FUNCI\xd3N LOOP EN ARDUINO\n//*******************************************\nvoid loop(){\n        if (!client.connected()){ // Si NO se estableci\xf3 la conexi\xf3n\n            conect_broker(); // Conexi\xf3n al BROKER, llamada a funci\xf3n\n        }\n        client.loop(); // Conexi\xf3n en BUCLE\n        setTemperature();\n        delay(30000);\n    }*/\n'})})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);