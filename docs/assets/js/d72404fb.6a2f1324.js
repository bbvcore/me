"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[5850],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>d});var o=t(6540);const a={},r=o.createContext(a);function s(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(r.Provider,{value:e},n.children)}},9854:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Programacion/Arduino/flujo-hal-esp32","title":"Flujo Aedes - Hal","description":"128736; Flujo Node-Red Aedes","source":"@site/docs/Programacion/Arduino/flujo-hal-esp32.md","sourceDirName":"Programacion/Arduino","slug":"/Programacion/Arduino/flujo-hal-esp32","permalink":"/me/docs/docs/Programacion/Arduino/flujo-hal-esp32","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programacion/Arduino/flujo-hal-esp32.md","tags":[],"version":"current","frontMatter":{"title":"Flujo Aedes - Hal"},"sidebar":"tutorialSidebar","previous":{"title":"ESP32 + DHT11 + MQTT","permalink":"/me/docs/docs/Programacion/Arduino/dht11"},"next":{"title":"ESP32 + HAL adaptado a Node-red","permalink":"/me/docs/docs/Programacion/Arduino/hal-mqtt-node-red"}}');var a=t(4848),r=t(8453);const s={title:"Flujo Aedes - Hal"},d="\ud83d\udee0 Flujo Node-Red Aedes",i={},l=[];function c(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"-flujo-node-red-aedes",children:"\ud83d\udee0 Flujo Node-Red Aedes"})}),"\n",(0,a.jsx)(e.p,{children:"Flujo de node-red para poder trabajar con un ESP32\ny transmitir su temperatura a trav\xe9s de un broker Aedes."}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:(0,a.jsxs)(e.p,{children:["Obtener el ",(0,a.jsx)("b",{children:"JSON"})," del flujo para usar en ",(0,a.jsx)("b",{children:"Node-red"})]})}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'[\n    {\n        "id": "d2d7d69d8ec676de",\n        "type": "tab",\n        "label": "Aedes + Esp32 temperatura",\n        "disabled": false,\n        "info": "",\n        "env": []\n    },\n    {\n        "id": "b49f517879342d2d",\n        "type": "mongodb3",\n        "uri": "mongodb://localhost:27017/ESP32",\n        "name": "",\n        "options": "",\n        "parallelism": "-1"\n    },\n    {\n        "id": "ebd5c64a.61c8d",\n        "type": "mqtt-broker",\n        "name": "Broker Aedes",\n        "broker": "192.168.1.55",\n        "port": "1883",\n        "clientid": "node-red-client",\n        "autoConnect": true,\n        "usetls": false,\n        "protocolVersion": 4,\n        "keepalive": "60",\n        "cleansession": true,\n        "autoUnsubscribe": true,\n        "birthTopic": "",\n        "birthQos": "0",\n        "birthPayload": "",\n        "birthMsg": {},\n        "closeTopic": "",\n        "closePayload": "",\n        "closeMsg": {},\n        "willTopic": "",\n        "willQos": "0",\n        "willRetain": false,\n        "willPayload": "",\n        "willMsg": {},\n        "userProps": "",\n        "sessionExpiry": ""\n    },\n    {\n        "id": "871eb7bf686042da",\n        "type": "mqtt-broker",\n        "name": "brokerEsp32",\n        "broker": "192.168.1.55",\n        "port": "1883",\n        "clientid": "",\n        "autoConnect": true,\n        "usetls": false,\n        "protocolVersion": "4",\n        "keepalive": "60",\n        "cleansession": true,\n        "autoUnsubscribe": true,\n        "birthTopic": "",\n        "birthQos": "0",\n        "birthRetain": "false",\n        "birthPayload": "",\n        "birthMsg": {},\n        "closeTopic": "",\n        "closeQos": "0",\n        "closeRetain": "false",\n        "closePayload": "",\n        "closeMsg": {},\n        "willTopic": "",\n        "willQos": "0",\n        "willRetain": "false",\n        "willPayload": "",\n        "willMsg": {},\n        "userProps": "",\n        "sessionExpiry": ""\n    },\n    {\n        "id": "f2f358f62e8eee1f",\n        "type": "mqtt in",\n        "z": "d2d7d69d8ec676de",\n        "name": "",\n        "topic": "temperature",\n        "qos": "2",\n        "datatype": "auto-detect",\n        "broker": "871eb7bf686042da",\n        "nl": false,\n        "rap": true,\n        "rh": 0,\n        "inputs": 0,\n        "x": 150,\n        "y": 160,\n        "wires": [\n            [\n                "3e1bae80ea115f99",\n                "7eb173b27aab6a46"\n            ]\n        ]\n    },\n    {\n        "id": "e2af2fbf2d2b60dd",\n        "type": "aedes broker",\n        "z": "d2d7d69d8ec676de",\n        "name": "brokerEsp32",\n        "mqtt_port": "1883",\n        "mqtt_ws_bind": "port",\n        "mqtt_ws_port": "",\n        "mqtt_ws_path": "",\n        "cert": "",\n        "key": "",\n        "certname": "",\n        "keyname": "",\n        "persistence_bind": "memory",\n        "dburl": "",\n        "usetls": false,\n        "x": 150,\n        "y": 240,\n        "wires": [\n            [],\n            []\n        ]\n    },\n    {\n        "id": "3e1bae80ea115f99",\n        "type": "debug",\n        "z": "d2d7d69d8ec676de",\n        "name": "debug 1",\n        "active": true,\n        "tosidebar": true,\n        "console": true,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 410,\n        "y": 160,\n        "wires": []\n    },\n    {\n        "id": "0ce86af7afc7e71e",\n        "type": "comment",\n        "z": "d2d7d69d8ec676de",\n        "name": "ESP32 conectado al Broker enviando la temperatura del microprocesador",\n        "info": "",\n        "x": 320,\n        "y": 80,\n        "wires": []\n    },\n    {\n        "id": "7eb173b27aab6a46",\n        "type": "function",\n        "z": "d2d7d69d8ec676de",\n        "name": "obj JSON",\n        "func": "\\nlet value = msg.payload\\nlet obj = {\\n    temp : value\\n}\\nmsg.payload = obj\\nreturn msg\\n\\n",\n        "outputs": 1,\n        "timeout": 0,\n        "noerr": 0,\n        "initialize": "",\n        "finalize": "",\n        "libs": [],\n        "x": 360,\n        "y": 260,\n        "wires": [\n            [\n                "292e901892823db6"\n            ]\n        ]\n    },\n    {\n        "id": "292e901892823db6",\n        "type": "debug",\n        "z": "d2d7d69d8ec676de",\n        "name": "debug 2",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 560,\n        "y": 260,\n        "wires": []\n    },\n    {\n        "id": "f1e34b39.3c9c5",\n        "type": "http in",\n        "z": "d2d7d69d8ec676de",\n        "name": "temperature",\n        "url": "temperature",\n        "method": "post",\n        "upload": false,\n        "swaggerDoc": "",\n        "x": 130,\n        "y": 340,\n        "wires": [\n            [\n                "f8a3f69a.9e8fa8"\n            ]\n        ]\n    },\n    {\n        "id": "f8a3f69a.9e8fa8",\n        "type": "json",\n        "z": "d2d7d69d8ec676de",\n        "name": "Parse JSON",\n        "property": "payload",\n        "action": "obj",\n        "pretty": false,\n        "x": 380,\n        "y": 340,\n        "wires": [\n            [\n                "ebf49a0b.3fe71",\n                "d7a4f69a.6d7f7"\n            ]\n        ]\n    },\n    {\n        "id": "ebf49a0b.3fe71",\n        "type": "debug",\n        "z": "d2d7d69d8ec676de",\n        "name": "Ver objeto temperatura",\n        "active": true,\n        "tosidebar": true,\n        "console": false,\n        "tostatus": false,\n        "complete": "payload",\n        "targetType": "msg",\n        "statusVal": "",\n        "statusType": "auto",\n        "x": 640,\n        "y": 340,\n        "wires": []\n    },\n    {\n        "id": "d7a4f69a.6d7f7",\n        "type": "http response",\n        "z": "d2d7d69d8ec676de",\n        "name": "Send Response",\n        "statusCode": "200",\n        "headers": {},\n        "x": 620,\n        "y": 440,\n        "wires": []\n    }\n]\n'})})]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);