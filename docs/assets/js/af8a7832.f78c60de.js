"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[949],{8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>t});var o=r(6540);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}},8477:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>p,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Servicios/Contenerizacion/Docker/elk","title":"ELK","description":"Despliegue b\xe1sico para pruebas de la pila de elastic ELK. Uno de los principales problemas de realizar un despliegue con docker-compose en este caso es que elasticsearch y kibana requieren de la combinaci\xf3n de un proceso interactivo y en un orden de ejecuci\xf3n determinado, ni completamente secuencial ni paralelo, si se pretende a\xf1adir seguridad por ello este despliegue es sin seguridad. Con contenedores resulta m\xe1s sencillo un despliegue con seguridad, aunque en este caso particular creo que ser\xeda mejor un despliegue con scripting.","source":"@site/docs/Servicios/Contenerizacion/Docker/elk.md","sourceDirName":"Servicios/Contenerizacion/Docker","slug":"/Servicios/Contenerizacion/Docker/elk","permalink":"/me/docs/docs/Servicios/Contenerizacion/Docker/elk","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Servicios/Contenerizacion/Docker/elk.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"ELK"},"sidebar":"tutorialSidebar","previous":{"title":"Docker","permalink":"/me/docs/docs/Servicios/Contenerizacion/Docker/"},"next":{"title":"Podman","permalink":"/me/docs/docs/Servicios/Contenerizacion/Podman/"}}');var s=r(4848),i=r(8453);const c={sidebar_position:2,title:"ELK"},t="ELK",a={},l=[{value:"Despliegue con docker-compose",id:"despliegue-con-docker-compose",level:2},{value:"Opciones",id:"opciones",level:2},{value:"Comprobaci\xf3n de logs",id:"comprobaci\xf3n-de-logs",level:3},{value:"Acceso contenedores",id:"acceso-contenedores",level:3},{value:"Script para automatizar el proceso.",id:"script-para-automatizar-el-proceso",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"elk",children:"ELK"})}),"\n",(0,s.jsxs)(n.p,{children:["Despliegue b\xe1sico para pruebas de la pila de elastic ",(0,s.jsx)(n.strong,{children:"ELK"}),". Uno de los principales problemas de realizar un despliegue con docker-compose en este caso es que ",(0,s.jsx)(n.strong,{children:"elasticsearch"})," y ",(0,s.jsx)(n.strong,{children:"kibana"})," requieren de la combinaci\xf3n de un proceso interactivo y en un orden de ejecuci\xf3n determinado, ni completamente secuencial ni paralelo, si se pretende a\xf1adir seguridad por ello este despliegue es sin seguridad. Con contenedores resulta m\xe1s sencillo un despliegue con seguridad, aunque en este caso particular creo que ser\xeda mejor un despliegue con scripting."]}),"\n",(0,s.jsx)(n.h2,{id:"despliegue-con-docker-compose",children:"Despliegue con docker-compose"}),"\n",(0,s.jsxs)(n.p,{children:["Utilizaci\xf3n de la herramienta ",(0,s.jsx)(n.strong,{children:"docker-compose"})," que requiere de un fichero ",(0,s.jsx)(n.strong,{children:"yml/yaml"})," para realizar el despliegue."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"Fichero Yaml para el despliegue"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'version: "3.8"\r\n\r\nservices:\r\n  elasticsearch:\r\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2\r\n    container_name: elasticsearch\r\n    environment:\r\n      - discovery.type=single-node\r\n      - xpack.security.enabled=false\r\n    ports:\r\n      - "9200:9200"\r\n    networks:\r\n      - elk-basic\r\n\r\n  kibana:\r\n    image: docker.elastic.co/kibana/kibana:8.8.2\r\n    container_name: kibana\r\n    environment:\r\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200\r\n      - XPACK_SECURITY_ENABLED=false\r\n      - KIBANA_SYSTEM_PASSWORD=\r\n    ports:\r\n      - "5601:5601"\r\n    depends_on:\r\n      - elasticsearch\r\n    networks:\r\n      - elk-basic\r\n\r\nnetworks:\r\n  elk-basic:\r\n    driver: bridge\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"opciones",children:"Opciones"}),"\n",(0,s.jsx)(n.h3,{id:"comprobaci\xf3n-de-logs",children:"Comprobaci\xf3n de logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"docker-compose logs -f kibana\n"})}),"\n",(0,s.jsx)(n.h3,{id:"acceso-contenedores",children:"Acceso contenedores"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"sudo docker exec -it <name-container> /bin/bash\n"})}),"\n",(0,s.jsx)(n.h2,{id:"script-para-automatizar-el-proceso",children:"Script para automatizar el proceso."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:"Script despliegue.sh"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'#!/bin/bash\r\n# Uso de despliege.sh:\r\n# <namefile.yaml o yml> [up|down|restart]\r\n# Tag para el nombre de project name que usa docker-compose en el despliegue\r\n# Si no se indica un tag coge el nombre del directorio, por ello se personalizaCOMPOSE_FILE="$1"\r\n\r\n#===========================================================================\r\n# VARIABLES\r\n#===========================================================================\r\n\r\nCOMMAND="$2"\r\nPROJECT_NAME="despliegue_elk"\r\n\r\n#===========================================================================\r\n# FUNCIONES\r\n#===========================================================================\r\n# Despliegue\r\nfunction up(){\r\n    echo "Desplegando los contenedores..."\r\n    docker-compose -p "$PROJECT_NAME" -f "$COMPOSE_FILE" up -d\r\n}\r\n\r\n# Anular el Despliegue\r\nfunction down(){\r\n    echo "Deteniendo los contenedores..."\r\n    docker-compose -p "$PROJECT_NAME" -f "$COMPOSE_FILE" down\r\n}\r\n\r\n# Reiniciar el Despliegue\r\nfunction restart(){\r\n    echo "Reiniciando el despliegue..."\r\n    echo "Primero tumbando los microservicios"\r\n    down 2>/dev/null || echo "No se ha podido levantar el sistema"\r\n    sleep 3\r\n    echo "Segundo levantando los microservicios"\r\n    up 2>/dev/null || echo "No se ha podilo levantar el sistema"\r\n}\r\n\r\n#===========================================================================\r\n# SWITCH\r\n#===========================================================================\r\ncase "$COMMAND" in\r\n    up) up ;;\r\n    down) down ;;\r\n    restart) restart ;;\r\n    *)\r\n    echo\r\n    echo "***********************************************************"\r\n    echo "*\t\t\t\t\t\t\t  *"\r\n    echo "*\t    Despliegue con DOCKER-COMPOSE\t\t  *"\r\n    echo "*\t\t\t\t\t\t\t  *"\r\n    echo "***********************************************************"\r\n     echo "*\t\t\t\t\t\t\t  *"\r\n    echo "*\tInstrucciones para ejecutar el despliegue\t  *"\r\n    echo "*\t\t\t\t\t\t\t  *"\r\n    echo "***********************************************************"\r\n    echo "* Para ejecutar el despliegue siga el siguiente patr\xf3n:   *"\r\n    echo "*\t\t\t\t\t\t\t  *"\r\n    echo "* $0 <nombre fichero YAML> [up|down|restart] *"\r\n    echo "*\t\t\t\t\t\t\t  *"\r\n    echo "***********************************************************"\r\n    echo\r\n    exit 1\r\n    ;;\r\nesac\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);