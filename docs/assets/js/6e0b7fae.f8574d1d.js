"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[5707],{2469:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Programacion/Arduino/dht11","title":"ESP32 + DHT11 + MQTT","description":"128196;C\xf3digo ESP32 + DHT11 + MQTT","source":"@site/docs/Programacion/Arduino/dht11.md","sourceDirName":"Programacion/Arduino","slug":"/Programacion/Arduino/dht11","permalink":"/me/docs/docs/Programacion/Arduino/dht11","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programacion/Arduino/dht11.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"ESP32 + DHT11 + MQTT","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"MongoDB","permalink":"/me/docs/docs/Programacion/mongodb"},"next":{"title":"Flujo Aedes - Hal","permalink":"/me/docs/docs/Programacion/Arduino/flujo-hal-esp32"}}');var o=r(4848),t=r(8453);const a={title:"ESP32 + DHT11 + MQTT",sidebar_position:1},s="\ud83d\udcc4C\xf3digo ESP32 + DHT11 + MQTT",l={},d=[];function c(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components},{Details:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"c\xf3digo-esp32--dht11--mqtt",children:"\ud83d\udcc4C\xf3digo ESP32 + DHT11 + MQTT"})}),"\n",(0,o.jsxs)(e.p,{children:["Este c\xf3digo sirve para realizar mediciones de temperatura mediante el ",(0,o.jsx)(e.strong,{children:"sensor DHT11"})," conectado a un ",(0,o.jsx)(e.strong,{children:"ESP32"})," mediante conexi\xf3n ",(0,o.jsx)(e.strong,{children:"WiFi"})," y a trav\xe9s del protocolo ",(0,o.jsx)(e.strong,{children:"MQTT"}),"."]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsxs)(e.p,{children:["C\xf3digo fuente de un ",(0,o.jsx)("b",{children:"ESP32"})," conectado a un ",(0,o.jsx)("b",{children:"DHT11"})]})}),(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-c++",children:'#include <Arduino.h>\n#include <WiFi.h>\n#include <PubSubClient.h> // Librer\xeda para MQTT\n#include <Adafruit_Sensor.h> // Librer\xeda para trabajar con ciertos sensores\n#include <DHT.h> // Librer\xeda propia para sensores DHT (como el 11 o el 22)\n\n//*******************************************\n// CONFIGURACI\xd3N DE RED Y BROKER\n//*******************************************\nconst char *ssid = ""; \nconst char *password = "";\nconst char *mqtt_server = ""; // IP del Broker\n\n//*******************************************\n// CONFIGURACI\xd3N DEL SENSOR DHT\n//*******************************************\n#define PIN 15 // Pin de conexi\xf3n de la patilla de datos del sensor\n#define SENSOR_TYPE DHT11 // Tipo de Sensor\n\n//*******************************************\n// OBJETOS: WIFI, CLIENT y DHT\n//*******************************************\nWiFiClient espClientDHT;\nPubSubClient client(espClientDHT);\nDHT dht(PIN, SENSOR_TYPE);\n\n//*******************************************\n// FUNCI\xd3N CONEXI\xd3N WIFI\n//*******************************************\nvoid initWifi() {\n    delay(10);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Intentando establecer la conexi\xf3n WiFi...");\n    }\n    Serial.println("Establecida la conexi\xf3n WiFi");\n}\n\n//*******************************************\n// FUNCI\xd3N CONEXI\xd3N MQTT\n//*******************************************\nvoid conectBroker() {\n    while (!client.connected()) {\n        Serial.print("Conectando al BROKER MQTT...");\n        if (client.connect("ESP32ClientDHT")) {\n            Serial.println("WORKS! Establecida conexi\xf3n con el BROKER");\n            client.subscribe("sensores/dht11"); // Subscribirse al SUBTOPIC \'/dht11\'\n        } else {\n            Serial.print("ERROR!, C\xf3digo de retorno => RC = ");\n            /*\n                RC = 0 => Conexi\xf3n correcta\n                RC = 1 => ERROR versi\xf3n protocolo\n                RC = 2 => ClientID NO v\xe1lido - Suele ser el m\xe1s habitual\n                RC = 3 => Broker NO disponible\n                RC = 4 => Error en las credenciales para el Broker \n                RC = 5 => No autorizada la conexi\xf3n\n             */\n            Serial.print(client.state());\n            Serial.println("Reintentando reconectar pasado 1 segundo...");\n            delay(1000);\n        }\n    }\n}\n\n//********************************************\n// FUNCI\xd3N PARA LEER LA TEMPERATURA Y HUMEDAD\n//********************************************\nvoid readAndPublishDHT() {\n    // Variables para almacenar las lecturas de las mediciones\n    float temp = dht.readTemperature(); // Leer la temperatura\n    float hum = dht.readHumidity();    // Leer la humedad\n\n    // Debuguear\n    if (isnan(temp) || isnan(hum)) {\n        Serial.println("ERROR!, problemas con la lectura de datos del sensor DHT11");\n        return;\n    }\n\n    // Construcci\xf3n del objeto para la publicaci\xf3n de los datos del sensor DHT\n    String payload = "{\\"temperature\\": " + String(temp) + ", \\"humidity\\": " + String(hum) + "}"; // Casting a String\n    Serial.println("Publicando mediciones : " + payload); // Mostrar por la consola aprovechando el puerto serie las mediciones\n\n    // Publicar en el subtopic "sensores/dht11"\n    client.publish("sensores/dht11", payload.c_str()); // Conversi\xf3n a \'const char *\', que es como los requiere la librer\xeda\n}\n\n//*******************************************\n// FUNCI\xd3N SETUP EN ARDUINO\n//*******************************************\nvoid setup() {\n    Serial.begin(115200);\n    initWifi(); // Lanzar la funci\xf3n de conexi\xf3n a WiFi\n    client.setServer(mqtt_server, 1883); // M\xe9todo para establecer la IP y el puerto del Broker\n    dht.begin(); // Inicializar el sensor DHT11\n}\n\n//*******************************************\n// FUNCI\xd3N LOOP EN ARDUINO\n//*******************************************\nvoid loop() {\n    if (!client.connected()) { // Si NO se estableci\xf3 la conexi\xf3n\n       conectBroker(); // Conexi\xf3n al BROKER, llamada a funci\xf3n\n    }\n    client.loop(); // Conexi\xf3n en BUCLE\n     readAndPublishDHT(); // Funci\xf3n de lectura/publicaci\xf3n de los datos del sensor DHT11\n    delay(30000); // Retardo hasta la siguiente lectura\n}\n'})})]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var i=r(6540);const o={},t=i.createContext(o);function a(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);