"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[8137],{6746:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Programacion/Shell-scripts/script","title":"Iteraciones arrays","description":"Gesti\xf3n de los argumentos y el manejo de los mismos desde la cli del OS.","source":"@site/docs/Programacion/Shell-scripts/script.md","sourceDirName":"Programacion/Shell-scripts","slug":"/Programacion/Shell-scripts/script","permalink":"/me/docs/docs/Programacion/Shell-scripts/script","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programacion/Shell-scripts/script.md","tags":[],"version":"current","frontMatter":{"title":"Iteraciones arrays"},"sidebar":"tutorialSidebar","previous":{"title":"Expresiones Shell","permalink":"/me/docs/docs/Programacion/Shell-scripts/expresiones-shell"},"next":{"title":"Manejo de Arrays en Shell","permalink":"/me/docs/docs/Programacion/Shell-scripts/uso-arrays-shell"}}');var r=a(4848),n=a(8453);const t={title:"Iteraciones arrays"},i="Iteraciones arrays ShellScripts",c={},l=[];function d(e){const s={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"iteraciones-arrays-shellscripts",children:"Iteraciones arrays ShellScripts"})}),"\n",(0,r.jsx)(s.p,{children:"Gesti\xf3n de los argumentos y el manejo de los mismos desde la cli del OS."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:'#!/bin/bash\n\nfiles=("file1.md" "file2.md" "file3.md")  # Puedes a\xf1adir m\xe1s ficheros\n\n# Iterar sobre cada archivo en el array\nfor file in "${files[@]}"; do # @ extrae uno a uno los elemnentos arrays\n\n  base_name=$(basename "$file" .md)\n  \n  # Ejecutar pandoc para convertir a HTML\n  pandoc "$file" -o "${base_name}.html"\n  \n  echo "Archivo ${file} convertido a ${base_name}.html"\ndone\n\n# $* = todos como string concatenado por espacios los elementos como 1 sola cadena separada por espacios,"s*" todos elementos como una sola cadena separa por delimitados (por defecto espacio) en este caso es solo un \xfanico valor, $@ todos como lista/array elementos separados por espacios, si "$@" como elemento individual de una lista/array.\n# lo mismo como $*, entonces adaptado a "$files[@]"\n# $@ para elementos de un script, $array[@] para los de un array\n# "${files[@]}" extraer cada valor independiente en el array\n# $file=document, ${file}1=document1, $file1 = error\n# Para extensi\xf3n usar pattern matchin ${file##*.}, ##* elimina todo antes del punto,\n# incluido el punto\n'})})]})}function m(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>t,x:()=>i});var o=a(6540);const r={},n=o.createContext(r);function t(e){const s=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(n.Provider,{value:s},e.children)}}}]);