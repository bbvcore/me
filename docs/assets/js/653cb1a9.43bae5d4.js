"use strict";(self.webpackChunkmydocs=self.webpackChunkmydocs||[]).push([[5079],{212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Programacion/Arduino/hal_post","title":"Petici\xf3n POST en Node-red","description":"128736;  Petici\xf3n POST a Node-red","source":"@site/docs/Programacion/Arduino/hal_post.md","sourceDirName":"Programacion/Arduino","slug":"/Programacion/Arduino/hal_post","permalink":"/me/docs/docs/Programacion/Arduino/hal_post","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Programacion/Arduino/hal_post.md","tags":[],"version":"current","frontMatter":{"title":"Petici\xf3n POST en Node-red"},"sidebar":"tutorialSidebar","previous":{"title":"ESP32 + HAL adaptado a Node-red","permalink":"/me/docs/docs/Programacion/Arduino/hal-mqtt-node-red"},"next":{"title":"Comando Net","permalink":"/me/docs/docs/Programacion/Batch/net"}}');var i=t(4848),a=t(8453);const o={title:"Petici\xf3n POST en Node-red"},s="\ud83d\udee0  Petici\xf3n POST a Node-red",d={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"--petici\xf3n-post-a-node-red",children:"\ud83d\udee0  Petici\xf3n POST a Node-red"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.p,{children:"C\xf3digo fuente para implementar en el ESP32"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c++",children:'//******************************************************\n//      PARA SOLICITUD POST CON NODE-RED \n//******************************************************\n\n// LIBRER\xcdAS\n#include <Arduino.h>\n#include <WiFi.h>\n#include <Adafruit_Sensor.h>\n#include <HTTPClient.h>  // Librer\xeda para enviar solicitudes HTTP\n#include <esp32-hal.h>   // Para leer la temperatura\n\n//*******************************************\n// CONFIGURACI\xd3N DE RED Y DEL ENDPOINT\n//*******************************************\n// Wifi\nconst char *ssid = "MiFibra-65F2";\nconst char *password = "";  \n// Endpoint\nconst String url = "http://192.168.1.55:1880/temperature";  \n\n//*******************************************\n// FUNCI\xd3N CONEXI\xd3N WIFI\n//*******************************************\nvoid initWifi() {\n    delay(10);\n    WiFi.begin(ssid, password);\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Intentando establecer la conexi\xf3n WiFi...");\n    }\n    Serial.println("Conexi\xf3n WiFi establecida");\n}\n\n//*******************************************\n// FUNCI\xd3N TEMPERATURA Y POST\n//*******************************************\nvoid temperatureToServer() {\n    // Leer la temperatura\n    float temp = temperatureRead();  \n    Serial.print("Temperatura: ");\n    Serial.print(temp);\n    Serial.println("\xba C");\n\n    // Cliente HTTP\n    HTTPClient http;\n    // Inicializar y pasar la URL\n    http.begin(url);  \n    // Cabeceras\n    http.addHeader("Content-Type", "application/json");  \n\n    // Payload estilo JSON\n    String payload = "{\\"temperature\\": " + String(temp) + "}";\n\n    // Enviar POST\n    int httpResponseCode = http.POST(payload);  \n\n    if (httpResponseCode > 0) {\n        Serial.print("C\xf3digo si se produce la respuesta HTTP: ");\n        Serial.println(httpResponseCode);\n    } else {\n        Serial.print("ERROR!, problemas con la solicitud HTTP: ");\n        Serial.println(httpResponseCode);\n    }\n\n    // Finalizar la solicitud POST\n    http.end();  \n}\n\n//***********************************************************************************************\n//*******************************************\n//       FUNCI\xd3N SETUP EN ARDUINO\n//*******************************************\nvoid setup() {\n    Serial.begin(115200);  // Iniciar la comunicaci\xf3n serial\n    initWifi;  // Conectar a la red WiFi\n}\n\n//*******************************************\n//       FUNCI\xd3N LOOP EN ARDUINO\n//*******************************************\nvoid loop() {\n    temperatureToServer();  // Enviar la temperatura al servidor en bucle\n    delay(30000);  // Esperar 30 segundos antes de enviar la siguiente lectura\n}\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);